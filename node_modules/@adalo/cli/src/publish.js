const path = require('path')
const os = require('os')
const fs = require('fs')
const util = require('util')
const chalk = require('chalk')
const axios = require('axios')
const FormData = require('form-data')
const inquirer = require('inquirer')

const readFile = util.promisify(fs.readFile)
const writeFile = util.promisify(fs.writeFile)

// utils
const { validatePackage, formatName } = require('./utils/publishing')
const { migrate } = require('./utils/migrate')

const publishLibrary = require('./lib/publish')
const deployLibrary = require('./lib/deploy')
const build = require('./build')

const publish = (module.exports = async (args, opts) => {
  let marketplaceURL = 'https://component-registry.herokuapp.com'
  if (opts.local) {
    marketplaceURL =
      process.env.MARKETPLACE_URL ||
      process.env.REGISTRY_URL ||
      'http://localhost:8000'
  }
  const url = `${marketplaceURL}/api/libraries`
  const validateURL = `${marketplaceURL}/api/libraries/validate`

  const ignoreLogo = opts['ignore-logo']

  try {
    // start publishing process
    console.clear()
    console.log('')
    console.log(chalk.bold('  Adalo Marketplace'))
    console.log('')

    // prep
    const packagePath = path.join(process.cwd(), 'package.json')
    const pkg = JSON.parse(await readFile(packagePath))
    const adaloConfigPath = path.join(process.cwd(), 'adalo.json')

    if (!fs.existsSync(adaloConfigPath)) {
      console.log(
        chalk.bold.yellow(
          '  New adalo.json does not exist, converting your project to use the new adalo.json...'
        )
      )
      console.log('')
      await migrate()
    }

    const adaloConfig = JSON.parse(await readFile(adaloConfigPath))
    const components = JSON.stringify(adaloConfig.components.map((c) => c.name))

    // 1. validate package.json configuration
    await validatePackage(pkg, adaloConfig, { ignoreLogo })

    const { name, version } = pkg
    const { displayName, description, author, supportURL } = adaloConfig

    // 2. validate library
    let {
      data: { isNewLibrary, public: isPublic },
    } = await axios.post(validateURL, {
      version,
      name,
    })

    let status = isPublic ? 'public' : 'private'
    let demoAppURL = ''
    let price = 0

    // 2.1 if library is new, prompt user for public or private
    if (isNewLibrary) {
      const answers = await inquirer.prompt([
        {
          type: 'list',
          name: 'status',
          message: 'Is your library public or private?',
          choices: ['public', 'private'],
          default: 'private',
        },
        {
          type: 'list',
          name: 'paidStatus',
          message: 'Is your library free or paid?',
          choices: ['free', 'paid'],
          default: 'free',
          when: (answers) => answers.status === 'public',
        },
        {
          type: 'number',
          name: 'price',
          message: 'How much do you want to sell your library for? (in USD)',
          when: (answers) => answers.paidStatus === 'paid',
          default: 0,
        },
        {
          type: 'input',
          name: 'demoAppURL',
          message: 'Link to demo app (optional)',
          when: () => !adaloConfig.demoAppURL,
        },
      ])

      status = answers.status
      demoAppURL = answers.demoAppURL || adaloConfig.demoAppURL
      price = answers.price
    }

    // 3. run build command
    await build(null, { ignoreLogo })

    // 4. initialize form
    const form = new FormData()

    // 5. append data to form
    form.append('name', name)
    form.append('components', components)
    form.append('version', version)
    form.append('status', status)
    form.append('displayName', displayName)
    form.append('supportURL', supportURL)

    if (isNewLibrary) {
      form.append('description', description)
      form.append('author', author)

      if (demoAppURL) {
        const [demoAppId] =
          demoAppURL.match(
            /[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/g
          ) || []

        if (demoAppId) {
          form.append('demoAppId', demoAppId)
        } else {
          throw new Error(
            'Invalid demo app URL, please use a valid Adalo app URL'
          )
        }
      }

      if (price) {
        form.append('price', price * 100)
      }

      adaloConfig.demoAppURL = demoAppURL || adaloConfig.demoAppURL
      adaloConfig.price = price

      await writeFile(adaloConfigPath, JSON.stringify(adaloConfig, null, 2))
    }

    // 6. get compressed "library" and append to form
    const file = await publishLibrary(pkg)
    form.append('library', file)

    // 7. get "dist" files and append to form
    const dist = await deployLibrary(pkg, { ignoreLogo })
    form.append('dist', dist)

    // 8. publish library
    console.info(
      `  Publishing ${name}@${version} to Adalo. This may take a few minutes...`
    )
    await axios.post(url, form, { headers: form.getHeaders() })
    console.info(`  Successfully published ${name}@${version} to Adalo. ðŸš€`)
  } catch (error) {
    console.error('')
    console.error(chalk.bold.red('  Oh no, something went wrong:'))
    console.error('')
    if (error.response && error.response.data) {
      console.error(`  - ${error.response.data.message}`)
    } else if (error.request && error.request.data) {
      console.error(`  - ${error.request.data.message}`)
    } else {
      console.error(`  - ${error}`)
    }
    console.error('')
    console.error(
      chalk.bold(
        `  For assistance publishing please visit ${chalk.italic.blue(
          'https://developers.adalo.com'
        )}`
      )
    )
    console.error('')

    process.exit(1)
  }
})
