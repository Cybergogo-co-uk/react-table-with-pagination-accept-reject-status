const fs = require('fs')
const path = require('path')
const validate = require('validate-npm-package-name')
const chalk = require('chalk')

const bytesToSize = (bytes) => {
  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB']
  if (bytes === 0) return 'n/a'
  const i = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)), 10)
  if (i === 0) return `${bytes} ${sizes[i]}`
  return `${(bytes / 1024 ** i).toFixed(1)} ${sizes[i]}`
}

/**
 * Formats name to @adalo-components/${npm-safe-name}
 * @param {*} name
 */
const formatName = (name) => {
  if (name.match(/[@/]/g)) {
    if (name.startsWith('@')) name = name.replace('@', '')
    if (name.includes('/')) name = name.replace('/', '-')
  }

  // prefix with npm organization
  name = `@adalo-components/${name}`

  return name
}

/**
 * Validate package.json
 * @param {Object} pkg
 */
const validatePackage = (pkg, adaloConfig, opts) => {
  let errors = []

  if (!pkg) throw new Error('Missing package.json')

  console.log('  Validating package.json configuration')

  if (!pkg.name) {
    errors.push('Missing package "name" property in package.json.')
  }

  if (!validate(pkg.name)) {
    errors.push('Invalid package name.')
  }

  if (!pkg.main) {
    errors.push('Missing "main" property in package.json.')
  } else if (!fs.existsSync(path.join(process.cwd(), pkg.main))) {
    errors.push('Package main path is invalid or does not exist.')
  }

  if (!pkg.version) {
    errors.push('Missing "version" property in package.json.')
  }

  if (!adaloConfig.author) {
    errors.push('Missing "author" property in adalo.json.')
  }

  if (!adaloConfig.description) {
    errors.push('Missing "description" property in adalo.json.')
  }

  if (!adaloConfig.demoAppURL) {
    errors.push('Missing "demoAppURL" property in adalo.json.')
  }

  if (!adaloConfig.supportURL) {
    errors.push('Missing "supportURL" property in adalo.json.')
  }

  // validate library property
  // validate library has a logo property
  if (!opts.ignoreLogo) {
    if (!adaloConfig.logo) {
      errors.push('Missing library logo in package.json "adalo" property.')
    } else if (!adaloConfig.logo.endsWith('logo.png')) {
      errors.push('Library logo filename should be "logo.png".')
    } else if (!fs.existsSync(adaloConfig.logo)) {
      errors.push(`Library logo path is invalid or logo doesn't exist`)
    }
  }

  if (adaloConfig.iosInstallScript) {
    if (!fs.existsSync(adaloConfig.iosInstallScript)) {
      errors.push(
        `Could not find "iosInstallScript" from ${adaloConfig.iosInstallScript}.`
      )
    }
  }

  if (adaloConfig.androidInstallScript) {
    if (!fs.existsSync(adaloConfig.androidInstallScript)) {
      errors.push(
        `Could not find "androidInstallScript" from ${adaloConfig.androidInstallScript}.`
      )
    }
  }

  if (adaloConfig.webpackConfig) {
    if (!fs.existsSync(adaloConfig.webpackConfig)) {
      errors.push(
        `Could not find "webpackConfig" from ${adaloConfig.webpackConfig}.`
      )
    }
  }

  if (errors.length > 0) {
    const text =
      errors.length === 1
        ? 'There is an error in your package.json:'
        : 'There are errors in your package.json:'

    console.error('')
    console.error(chalk.bold.red(`  ${text}`))
    console.error('')
    errors.forEach((err) => {
      console.error(`  - ${err}`)
    })
    console.error('')
    process.exit(1)
  }

  return true
}

const validateListingInfo = (listingInfo, opts) => {
  let errors = []

  if (!listingInfo) throw new Error('Missing adalo-listing.json')

  if (!listingInfo.displayName) {
    errors.push('Missing "displayName" property in listing info.')
  }

  if (!listingInfo.author) {
    errors.push('Missing "author" property in listing info.')
  }

  if (!listingInfo.description) {
    errors.push('Missing "description" property in listing info.')
  }

  if (listingInfo.price > 0 && !listingInfo.demoAppURL) {
    errors.push('Missing Demo App URL in listing info.')
  }
  if (
    listingInfo.demoAppURL &&
    !listingInfo.demoAppURL.match(
      /[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/g
    )[0]
  ) {
    errors.push('Invalid format for "demoAppURL" property in listing info.')
  }

  if (listingInfo.price > 0 && !listingInfo.supportURL) {
    errors.push('Missing Support Link in listing info.')
  }

  if (!listingInfo.logo) {
    errors.push('Missing "logo" property in listing info.')
  }

  if (!listingInfo.logo.endsWith('logo.png')) {
    errors.push('Library logo filename should be "logo.png".')
  }

  if (!fs.existsSync(listingInfo.logo)) {
    errors.push(`Library logo path is invalid or logo doesn't exist`)
  }

  if (errors.length > 0) {
    const text =
      errors.length === 1
        ? 'There is an error in your adalo-listing.json:'
        : 'There are errors in your adalo-listing.json:'

    console.error('')
    console.error(chalk.bold.red(`  ${text}`))
    console.error('')
    errors.forEach((err) => {
      console.error(`  - ${err}`)
    })
    console.error('')
    process.exit(1)
  }
}

module.exports = {
  bytesToSize,
  formatName,
  validatePackage,
  validateListingInfo,
}
