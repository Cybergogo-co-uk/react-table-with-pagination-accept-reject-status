const os = require('os')
const fs = require('fs')
const chalk = require('chalk')

const archiver = require('archiver')
const axios = require('axios')

// utils
const { bytesToSize, formatName } = require('../utils/publishing')

const publish = async (pkg) => {
  if (!pkg) throw Error('Missing package.json')

  try {
    console.log(`  Compressing ${chalk.green(pkg.name)}`)
    let tarKey = pkg.name
    if (tarKey.includes('/')) {
      tarKey = tarKey.replace('/', '_')
    }

    // create a file to stream archive data to
    const filePath = `${os.tmpdir()}/${tarKey}-${pkg.version}.tar`
    const output = fs.createWriteStream(filePath)
    const archive = archiver('tar')

    // pipe archive data to file
    archive.pipe(output)

    const ignore = ['node_modules/**', 'dist/**', '.storybook/**']
    const opts = { dot: true, ignore }
    archive.glob('**', opts, { prefix: tarKey })

    // finalize archive
    await archive.finalize()

    return new Promise((resolve, reject) => {
      output.on('close', async () => {
        console.log(
          `  Compressed Size ${chalk.green(bytesToSize(archive.pointer()))}`
        )

        try {
          return resolve(fs.createReadStream(filePath))
        } catch (err) {
          reject(err)
        }
      })
    })
  } catch (err) {
    console.error('')
    console.error(chalk.red('  Oh no, something went wrong:'))
    if (err.response) {
      console.error(`  - ${err.response.data}`)
    } else if (err.request) {
      console.error(`  - ${err.request.data}`)
    } else {
      console.error(`  - ${err}`)
    }
    console.error('')

    process.exit(1)
  }
}

module.exports = publish
