const path = require('path')
const fs = require('fs')
const os = require('os')
const util = require('util')
const chalk = require('chalk')
const archiver = require('archiver')

const readdir = util.promisify(fs.readdir)

const deploy = async (pkg, opts = {}) => {
  const editorKey = `editor-${pkg.version}.js`
  const runtimeKey = `runtime-${pkg.version}.js`
  const metadataKey = `metadata-${pkg.version}.json`

  try {
    let tarKey = `${pkg.name}-dist`
    if (tarKey.includes('/')) {
      tarKey = tarKey.replace('/', '_')
    }

    const filePath = `${os.tmpdir()}/${tarKey}.tar`
    const output = fs.createWriteStream(filePath)
    const archive = archiver('tar')

    archive.pipe(output)

    let files = [
      [editorKey, 'editor.js'],
      [runtimeKey, 'runtime.js'],
      [metadataKey, 'metadata.json'],
    ]

    // library component thumbnails
    let imageFiles = await readdir('./dist/icons')
    let images = imageFiles.map((file) => {
      let [filename, extension] = file.split('.')
      return [`icons/${filename}-${pkg.version}.${extension}`, `icons/${file}`]
    })

    files.push(...images)

    // library logo
    if (!opts.ignoreLogo) {
      const distFiles = await readdir('./dist')
      for (let file of distFiles) {
        if (!file) continue
        const [filename] = file.split('.')
        if (filename === 'logo') {
          const logo = [file, file]

          // add logo to files
          files.push(logo)
          break
        }
      }
    }

    console.log(`  Gathering ${chalk.green(pkg.name)} components`)

    let formData = []

    for (let [key, filename] of files) {
      formData.push({
        key,
        file: fs.createReadStream(path.join('./dist/', filename)),
      })
    }

    for (let file of formData) {
      if (!file) continue
      archive.append(file.file, { name: file.key })
    }

    await archive.finalize()

    return fs.createReadStream(filePath)
  } catch (err) {
    console.error('')
    console.error(chalk.red('  Oh no, something went wrong:'))
    if (err.response) {
      console.error(`  - ${err.response.data}`)
    } else if (err.request) {
      console.error(`  - ${err.request.data}`)
    } else {
      console.error(`  - ${err}`)
    }
    console.error('')

    process.exit(1)
  }
}

module.exports = deploy
